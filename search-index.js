var N=null,E="",T="t",U="u",searchIndex={};
var R=["device_name","device_id","isOutput","csound","result","status","option","string","nulerror","utf8error","Returns The number of samples in Csound's input buffer.","bufferptr","writable","readable","Enables external software to write audio into Csound…","This function can be called to obtain a list of available…","controlchannelptr","channelhints","pvsdataext","Gets the arguments used to construct or define a function…","rtclock","Sets a function to be called by Csound for opening…","Sets a function to be called by Csound for performing…","Sets the function which will be called whenever the…","Indicates to the user when csound has closed the midi…","get_size","copy_to_slice","as_slice","as_mut_slice","copy_from_slice","controlchanneltype","channelptr","to_owned","clone_into","try_from","try_into","borrow_mut","type_id","borrow","typeid","get_input_channel","audiochannel","get_output_channel","Return a `ChannelPtr` which represent a csound's input…","controlchannel","Return a `ChannelPtr` which represent a csound's output…","strchannel","Reads data from a csound's Audio channel","as_ref","channelinfo","default","opcodelistentry","language","csaudiodevice","csmididevice","rtaudioparams","ordering","partial_cmp","messagetype","channeldata","filetypes","as_mut","deref_mut","formatter","intoiterator","FileInfo","ChannelHints","ChannelInfo","PvsDataExt","OpcodeListEntry","CsAudioDevice","CsMidiDevice","RtAudioParams","AudioChannel","ChannelData","ControlChannel","FileTypes","Language","MessageType","StrChannel","CircularBuffer","BufferPtr","ControlChannelPtr","ControlChannelType","GetChannel","InputChannelPtr","OutputChannelPtr","ChannelPtr"];

searchIndex["csound"]={"doc":"Csound This crate contains safe Csound bindings for the…","i":[[6,"RTCLOCK",R[3],E,N,N],[3,R[65],E,"Struct containing the relevant info of files are opened by…",N,N],[12,"name",E,"pathname of the file; either full or relative to current dir",0,N],[12,"file_type",E,"Enum equivalent code for the file type code from the enum…",0,N],[12,"is_writing",E,"true if Csound is writing the file, false if reading",0,N],[12,"is_temp",E,"true if it is a temporary file that Csound will delete;…",0,N],[3,R[66],E,"Holds the channel HINTS information.",N,N],[12,"behav",E,E,1,N],[12,"dflt",E,E,1,N],[12,"min",E,E,1,N],[12,"max",E,E,1,N],[12,"x",E,E,1,N],[12,"y",E,E,1,N],[12,"width",E,E,1,N],[12,"height",E,E,1,N],[12,"attributes",E,E,1,N],[3,R[67],E,"Holds all relevant information about a csound bus channel.",N,N],[12,"name",E,"The channel name.",2,N],[12,"type_",E,"The channel type.",2,N],[12,"hints",E,"Channel extra metadata.",2,N],[3,R[87],E,"Struct represents a csound channel object.",N,N],[3,R[68],E,"Holds pvs data info of a pvs channel.",N,N],[12,"N",E,E,3,N],[12,"sliding",E,E,3,N],[12,"NB",E,E,3,N],[12,"overlap",E,E,3,N],[12,"winsize",E,E,3,N],[12,"wintype",E,E,3,N],[12,"format",E,E,3,N],[12,"framecount",E,E,3,N],[12,"frame",E,E,3,N],[3,R[81],E,"Csound buffer pointer representation. This struct is build…",N,N],[3,R[80],E,"Csound's Circular Buffer object. This struct wraps a *mut…",N,N],[3,R[82],E,"Rust representation for a raw csound channel pointer",N,N],[3,"Csound",E,"Opaque struct representing an csound object",N,N],[3,R[69],E,"Struct with information about a csound opcode.",N,N],[12,"opname",E,"The opcode name.",4,N],[12,"outypes",E,"The opcode ouput type.",4,N],[12,"intypes",E,"The opcode input type.",4,N],[12,"flags",E,E,4,N],[3,"Table",E,"Csound table representation. This struct is build up to…",N,N],[3,R[83],E,"Defines the types of csound bus cahnnels",N,N],[3,R[70],E,"Struct with specific audio device information.",N,N],[12,R[0],E,E,5,N],[12,R[1],E,E,5,N],[12,"rt_module",E,E,5,N],[12,"max_nchnls",E,E,5,N],[12,R[2],E,E,5,N],[3,R[71],E,"Struct with specific MIDI device information.",N,N],[12,R[0],E,E,6,N],[12,"interface_name",E,E,6,N],[12,R[1],E,E,6,N],[12,"midi_module",E,E,6,N],[12,R[2],E,E,6,N],[3,R[72],E,"Real time audio params for a specific audio Device.",N,N],[12,"devName",E,"Device Name.",7,N],[12,"devNum",E,"Device number.",7,N],[12,"bufSamp_SW",E,"Device software buffer size.",7,N],[12,"bufSamp_HW",E,"Device hardware buffer size.",7,N],[12,"nChannels",E,"Device max number of channels supported.",7,N],[12,"sampleFormat",E,"Device audio sample format.",7,N],[12,"sampleRate",E,"Device max sample rate.",7,N],[4,R[73],E,"An audio channel identifier",N,N],[13,"ctype",E,E,8,N],[4,R[74],E,"Enum variant which represent channel's types in callbacks.",N,N],[13,"CS_CONTROL_CHANNEL",E,E,9,N],[13,"CS_STRING_CHANNEL",E,E,9,N],[13,"CS_UNKNOWN_CHANNEL",E,E,9,N],[4,R[75],E,"A control channel identifier",N,N],[13,"ctype",E,E,10,N],[4,R[76],E,"Describes the differents file types which are supported…",N,N],[13,"CSFTYPE_UNKNOWN",E,E,11,N],[13,"CSFTYPE_UNIFIED_CSD",E,E,11,N],[13,"CSFTYPE_ORCHESTRA",E,E,11,N],[13,"CSFTYPE_SCORE",E,E,11,N],[13,"CSFTYPE_ORC_INCLUDE",E,E,11,N],[13,"CSFTYPE_SCO_INCLUDE",E,E,11,N],[13,"CSFTYPE_SCORE_OUT",E,E,11,N],[13,"CSFTYPE_SCOT",E,E,11,N],[13,"CSFTYPE_OPTIONS",E,E,11,N],[13,"CSFTYPE_EXTRACT_PARMS",E,E,11,N],[13,"CSFTYPE_RAW_AUDIO",E,E,11,N],[13,"CSFTYPE_IRCAM",E,E,11,N],[13,"CSFTYPE_AIFF",E,E,11,N],[13,"CSFTYPE_AIFC",E,E,11,N],[13,"CSFTYPE_WAVE",E,E,11,N],[13,"CSFTYPE_AU",E,E,11,N],[13,"CSFTYPE_SD2",E,E,11,N],[13,"CSFTYPE_W64",E,E,11,N],[13,"CSFTYPE_WAVEX",E,E,11,N],[13,"CSFTYPE_FLAC",E,E,11,N],[13,"CSFTYPE_CAF",E,E,11,N],[13,"CSFTYPE_WVE",E,E,11,N],[13,"CSFTYPE_OGG",E,E,11,N],[13,"CSFTYPE_MPC2K",E,E,11,N],[13,"CSFTYPE_RF64",E,E,11,N],[13,"CSFTYPE_AVR",E,E,11,N],[13,"CSFTYPE_HTK",E,E,11,N],[13,"CSFTYPE_MAT4",E,E,11,N],[13,"CSFTYPE_MAT5",E,E,11,N],[13,"CSFTYPE_NIST",E,E,11,N],[13,"CSFTYPE_PAF",E,E,11,N],[13,"CSFTYPE_PVF",E,E,11,N],[13,"CSFTYPE_SDS",E,E,11,N],[13,"CSFTYPE_SVX",E,E,11,N],[13,"CSFTYPE_VOC",E,E,11,N],[13,"CSFTYPE_XI",E,E,11,N],[13,"CSFTYPE_UNKNOWN_AUDIO",E,E,11,N],[13,"CSFTYPE_SOUNDFONT",E,E,11,N],[13,"CSFTYPE_STD_MIDI",E,E,11,N],[13,"CSFTYPE_MIDI_SYSEX",E,E,11,N],[13,"CSFTYPE_HETRO",E,E,11,N],[13,"CSFTYPE_HETROT",E,E,11,N],[13,"CSFTYPE_PVC",E,E,11,N],[13,"CSFTYPE_PVCEX",E,E,11,N],[13,"CSFTYPE_CVANAL",E,E,11,N],[13,"CSFTYPE_LPC",E,E,11,N],[13,"CSFTYPE_ATS",E,E,11,N],[13,"CSFTYPE_LORIS",E,E,11,N],[13,"CSFTYPE_SDIF",E,E,11,N],[13,"CSFTYPE_HRTF",E,E,11,N],[13,"CSFTYPE_UNUSED",E,E,11,N],[13,"CSFTYPE_LADSPA_PLUGIN",E,E,11,N],[13,"CSFTYPE_SNAPSHOT",E,E,11,N],[13,"CSFTYPE_FTABLES_TEXT",E,E,11,N],[13,"CSFTYPE_FTABLES_BINARY",E,E,11,N],[13,"CSFTYPE_XSCANU_MATRIX",E,E,11,N],[13,"CSFTYPE_FLOATS_TEXT",E,E,11,N],[13,"CSFTYPE_FLOATS_BINARY",E,E,11,N],[13,"CSFTYPE_INTEGER_TEXT",E,E,11,N],[13,"CSFTYPE_INTEGER_BINARY",E,E,11,N],[13,"CSFTYPE_IMAGE_PNG",E,E,11,N],[13,"CSFTYPE_POSTSCRIPT",E,E,11,N],[13,"CSFTYPE_SCRIPT_TEXT",E,E,11,N],[13,"CSFTYPE_OTHER_TEXT",E,E,11,N],[13,"CSFTYPE_OTHER_BINARY",E,E,11,N],[4,R[77],E,"The languages supported by csound",N,N],[13,"CSLANGUAGE_DEFAULT",E,E,12,N],[13,"CSLANGUAGE_AFRIKAANS",E,E,12,N],[13,"CSLANGUAGE_ALBANIAN",E,E,12,N],[13,"CSLANGUAGE_ARABIC",E,E,12,N],[13,"CSLANGUAGE_ARMENIAN",E,E,12,N],[13,"CSLANGUAGE_ASSAMESE",E,E,12,N],[13,"CSLANGUAGE_AZERI",E,E,12,N],[13,"CSLANGUAGE_BASQUE",E,E,12,N],[13,"CSLANGUAGE_BELARUSIAN",E,E,12,N],[13,"CSLANGUAGE_BENGALI",E,E,12,N],[13,"CSLANGUAGE_BULGARIAN",E,E,12,N],[13,"CSLANGUAGE_CATALAN",E,E,12,N],[13,"CSLANGUAGE_CHINESE",E,E,12,N],[13,"CSLANGUAGE_CROATIAN",E,E,12,N],[13,"CSLANGUAGE_CZECH",E,E,12,N],[13,"CSLANGUAGE_DANISH",E,E,12,N],[13,"CSLANGUAGE_DUTCH",E,E,12,N],[13,"CSLANGUAGE_ENGLISH_UK",E,E,12,N],[13,"CSLANGUAGE_ENGLISH_US",E,E,12,N],[13,"CSLANGUAGE_ESTONIAN",E,E,12,N],[13,"CSLANGUAGE_FAEROESE",E,E,12,N],[13,"CSLANGUAGE_FARSI",E,E,12,N],[13,"CSLANGUAGE_FINNISH",E,E,12,N],[13,"CSLANGUAGE_FRENCH",E,E,12,N],[13,"CSLANGUAGE_GEORGIAN",E,E,12,N],[13,"CSLANGUAGE_GERMAN",E,E,12,N],[13,"CSLANGUAGE_GREEK",E,E,12,N],[13,"CSLANGUAGE_GUJARATI",E,E,12,N],[13,"CSLANGUAGE_HEBREW",E,E,12,N],[13,"CSLANGUAGE_HINDI",E,E,12,N],[13,"CSLANGUAGE_HUNGARIAN",E,E,12,N],[13,"CSLANGUAGE_ICELANDIC",E,E,12,N],[13,"CSLANGUAGE_INDONESIAN",E,E,12,N],[13,"CSLANGUAGE_ITALIAN",E,E,12,N],[13,"CSLANGUAGE_JAPANESE",E,E,12,N],[13,"CSLANGUAGE_KANNADA",E,E,12,N],[13,"CSLANGUAGE_KASHMIRI",E,E,12,N],[13,"CSLANGUAGE_KONKANI",E,E,12,N],[13,"CSLANGUAGE_KOREAN",E,E,12,N],[13,"CSLANGUAGE_LATVIAN",E,E,12,N],[13,"CSLANGUAGE_LITHUANIAN",E,E,12,N],[13,"CSLANGUAGE_MACEDONIAN",E,E,12,N],[13,"CSLANGUAGE_MALAY",E,E,12,N],[13,"CSLANGUAGE_MALAYALAM",E,E,12,N],[13,"CSLANGUAGE_MANIPURI",E,E,12,N],[13,"CSLANGUAGE_MARATHI",E,E,12,N],[13,"CSLANGUAGE_NEPALI",E,E,12,N],[13,"CSLANGUAGE_NORWEGIAN",E,E,12,N],[13,"CSLANGUAGE_ORIYA",E,E,12,N],[13,"CSLANGUAGE_POLISH",E,E,12,N],[13,"CSLANGUAGE_PORTUGUESE",E,E,12,N],[13,"CSLANGUAGE_PUNJABI",E,E,12,N],[13,"CSLANGUAGE_ROMANIAN",E,E,12,N],[13,"CSLANGUAGE_RUSSIAN",E,E,12,N],[13,"CSLANGUAGE_SANSKRIT",E,E,12,N],[13,"CSLANGUAGE_SERBIAN",E,E,12,N],[13,"CSLANGUAGE_SINDHI",E,E,12,N],[13,"CSLANGUAGE_SLOVAK",E,E,12,N],[13,"CSLANGUAGE_SLOVENIAN",E,E,12,N],[13,"CSLANGUAGE_SPANISH",E,E,12,N],[13,"CSLANGUAGE_SWAHILI",E,E,12,N],[13,"CSLANGUAGE_SWEDISH",E,E,12,N],[13,"CSLANGUAGE_TAMIL",E,E,12,N],[13,"CSLANGUAGE_TATAR",E,E,12,N],[13,"CSLANGUAGE_TELUGU",E,E,12,N],[13,"CSLANGUAGE_THAI",E,E,12,N],[13,"CSLANGUAGE_TURKISH",E,E,12,N],[13,"CSLANGUAGE_UKRAINIAN",E,E,12,N],[13,"CSLANGUAGE_URDU",E,E,12,N],[13,"CSLANGUAGE_UZBEK",E,E,12,N],[13,"CSLANGUAGE_VIETNAMESE",E,E,12,N],[13,"CSLANGUAGE_COLUMBIAN",E,E,12,N],[4,R[78],E,"Define the type of csound messages",N,N],[13,"CSOUNDMSG_DEFAULT",E,"standard message.",13,N],[13,"CSOUNDMSG_ERROR",E,"error message (initerror, perferror, etc.).",13,N],[13,"CSOUNDMSG_ORCH",E,"orchestra opcodes (e.g. printks).",13,N],[13,"CSOUNDMSG_REALTIME",E,"for progress display and heartbeat characters.",13,N],[13,"CSOUNDMSG_WARNING",E,"warning messages.",13,N],[13,"CSOUNDMSG_STDOUT",E,"stdout messages.",13,N],[4,"Status",E,"Csound error codes",N,N],[13,"CS_SIGNAL",E,"Termination requested by SIGINT or SIGTERM.",14,N],[13,"CS_MEMORY",E,"Failed to allocate requested memory.",14,N],[13,"CS_PERFORMANCE",E,"Failed during performance.",14,N],[13,"CS_INITIALIZATION",E,"Failed during initialization.",14,N],[13,"CS_ERROR",E,"Unspecified failure.",14,N],[13,"CS_SUCCESS",E,"Completed successfully.",14,N],[13,"CS_OK",E,"Completed but with additional info.",14,N],[4,R[79],E,"A string channel identifier",N,N],[13,"ctype",E,E,15,N],[11,"new",E,"Creates a new pvs data channel struct.",3,[[["u32"]],[R[18]]]],[11,"new",E,"Create a new csound object.",16,[[],[R[3]]]],[11,"initialize",E,"Initializes the csound library with specific flags(see:…",16,[[["i32"]],[["str"],[R[4],["str"]]]]],[11,"set_option",E,"Sets a single csound option(flag).",16,[[["self"],["str"]],[["str"],[R[4],["str"]]]]],[11,"start",E,"Prepares Csound for performance.",16,[[["self"]],[["str"],[R[4],["str"]]]]],[11,"version",E,"Returns the version number times 1000 for example, if the…",16,[[["self"]],["u32"]]],[11,"api_version",E,"Returns the API version number times 100",16,[[["self"]],["u32"]]],[11,"stop",E,"Stops the performance of a csound's instance Note: It is…",16,[[["self"]]]],[11,"reset",E,"Resets all internal memory and state in preparation for a…",16,[[["self"]]]],[11,"compile",E,"Compiles Csound input files (such as an orchestra and…",16,[[["self"]],[["str"],[R[4],["str"]]]]],[11,"compile_csd",E,"Compiles a Csound input file (CSD, .csd file), but does…",16,[[["self"],[T]],[["str"],[R[4],["str"]]]]],[11,"compile_csd_text",E,"Behaves the same way as `Csound::compile_csd`, except that…",16,[[["self"],[T]],[["str"],[R[4],["str"]]]]],[11,"compile_orc",E,"Parses and compiles the given orchestra from an ASCII…",16,[[["self"],[T]],[["str"],[R[4],["str"]]]]],[11,"compile_orc_async",E,"Async version of `Csound::compile_orc`. The code is parsed…",16,[[["self"],[T]],[["str"],[R[4],["str"]]]]],[11,"eval_code",E,"Parse and compile an orchestra given on a string,…",16,[[["self"],[T]],[["f64"],[R[4],["f64","str"]],["str"]]]],[11,"perform",E,"Senses input events and performs audio output.",16,[[["self"]],["i32"]]],[11,"perform_ksmps",E,"Senses input events, and performs one control sample worth…",16,[[["self"]],["bool"]]],[11,"perform_buffer",E,"Performs Csound, sensing real-time and score events and…",16,[[["self"]],["bool"]]],[11,"udp_server_start",E,"Starts the UDP server",16,[[["self"],["u32"]],[[R[5]],[R[4],[R[5]]]]]],[11,"udp_server_status",E,"Returns The port number on which the server is running, or…",16,[[["self"]],[[R[6],["u32"]],["u32"]]]],[11,"udp_server_close",E,"Closes the UDP server # Returns Ok if the running server…",16,[[["self"]],[[R[5]],[R[4],[R[5]]]]]],[11,"udp_console",E,"Turns on the transmission of console messages",16,[[["self"],["u32"],["str"],["bool"]],[[R[5]],[R[4],[R[5]]]]]],[11,"udp_stop_console",E,"Stop transmitting console messages via UDP",16,[[["self"]]]],[11,"get_sample_rate",E,"Returns The number of audio sample frames per second.",16,[[["self"]],["f64"]]],[11,"get_control_rate",E,"Returns The number of control samples per second.",16,[[["self"]],["f64"]]],[11,"get_ksmps",E,"Returns The number of audio sample frames per control…",16,[[["self"]],["u32"]]],[11,"output_channels",E,"Returns The number of audio output channels. Set through…",16,[[["self"]],["u32"]]],[11,"input_channels",E,"Returns The number of audio input channels. Set through…",16,[[["self"]],["u32"]]],[11,"get_0dBFS",E,"Returns The 0dBFS level of the spin/spout buffers.",16,[[["self"]],["f64"]]],[11,"get_freq",E,"Returns The A4 frequency reference",16,[[["self"]],["f64"]]],[11,"get_current_sample_time",E,"#Returns The current performance time in samples",16,[[["self"]],["usize"]]],[11,"get_size_myflt",E,"Returns The size of MYFLT in bytes.",16,[[["self"]],["u32"]]],[11,"get_debug_level",E,"Returns Whether Csound is set to print debug messages.…",16,[[["self"]],["u32"]]],[11,"set_debug_level",E,"Sets whether Csound prints debug messages from the…",16,[[["self"],["i32"]]]],[11,"get_input_name",E,"Gets the csound's input source name if it has been defined…",16,[[["self"]],[[R[7]],[R[6],[R[7]]]]]],[11,"get_output_name",E,"Gets output device name if the realtime output has been…",16,[[["self"]],[[R[7]],[R[6],[R[7]]]]]],[11,"set_output",E,"Set output destination, type and format # Arguments *…",16,[[["self"],["str"]],[[R[8]],[R[4],[R[8]]]]]],[11,"get_output_format",E,"Get output type and format. # Example `let csound =…",16,[[["self"]],[[R[9]],[R[4],[R[9]]]]]],[11,"set_input",E,"Sets input source # Arguments * `name` The source device…",16,[[["self"],["str"]],[[R[8]],[R[4],[R[8]]]]]],[11,"set_midi_file_input",E,"Set MIDI file input name",16,[[["self"],["str"]],[[R[8]],[R[4],[R[8]]]]]],[11,"set_midi_file_output",E,"Set MIDI file output name",16,[[["self"],["str"]],[[R[8]],[R[4],[R[8]]]]]],[11,"set_midi_input",E,"Set MIDI input device name/number",16,[[["self"],["str"]],[[R[8]],[R[4],[R[8]]]]]],[11,"set_midi_output",E,"Set MIDI output device name",16,[[["self"],["str"]],[[R[8]],[R[4],[R[8]]]]]],[11,"set_rt_audio_module",E,"Sets the current RT audio module",16,[[["self"],["str"]],[[R[8]],[R[4],[R[8]]]]]],[11,"get_input_buffer_size",E,R[10],16,[[["self"]],["usize"]]],[11,"get_output_buffer_size",E,R[10],16,[[["self"]],["usize"]]],[11,"get_input_buffer",E,"Gets the csound's input buffer. # Returns An Option…",16,[[["self"]],[[R[6],[R[11]]],[R[11],[R[12]]]]]],[11,"get_output_buffer",E,"Gets the csound's output buffer. # Returns An Option…",16,[[["self"]],[[R[11],[R[13]]],[R[6],[R[11]]]]]],[11,"get_spin",E,R[14],16,[[["self"]],[[R[6],[R[11]]],[R[11],[R[12]]]]]],[11,"get_spout",E,"Enables external software to read audio from Csound before…",16,[[["self"]],[[R[11],[R[13]]],[R[6],[R[11]]]]]],[11,"read_output_buffer",E,"Method used when you want to copy audio samples from the…",16,[[["self"]],[[R[4],["usize","str"]],["usize"],["str"]]]],[11,"write_input_buffer",E,"Method used when you want to copy custom audio samples…",16,[[["self"]],[[R[4],["usize","str"]],["usize"],["str"]]]],[11,"read_spout_buffer",E,"Enables external software to read audio from Csound after…",16,[[["self"]],[[R[4],["usize","str"]],["usize"],["str"]]]],[11,"write_spin_buffer",E,R[14],16,[[["self"]],[[R[4],["usize","str"]],["usize"],["str"]]]],[11,"clear_spin",E,"Clears the spin buffer.",16,[[["self"]]]],[11,"add_spin_sample",E,"Adds the indicated sample into the audio input working…",16,[[["self"],["u32"],["f64"]]]],[11,"set_spin_sample",E,"Sets the audio input working buffer (spin) to the…",16,[[["self"],["u32"],["f64"]]]],[11,"get_spout_sample",E,"Gets an audio sample from the spout buffer. only ever…",16,[[["self"],["u32"]],["f64"]]],[11,"set_host_implemented_audioIO",E,"Enable to host to handle the audio implementation. Calling…",16,[[["self"],["u32"]]]],[11,"get_audio_devices",E,R[15],16,[[["self"]]]],[11,"set_midi_module",E,"Sets the current MIDI IO module",16,[[["self"],["str"]]]],[11,"set_host_implemented_midiIO",E,"call this function with state 1 if the host is going to…",16,[[["self"],["u32"]]]],[11,"get_midi_devices",E,R[15],16,[[["self"]]]],[11,"read_score",E,"Reads, preprocesses, and loads a score from an ASCII…",16,[[["self"],["str"]],[["str"],[R[4],["str"]]]]],[11,"read_score_async",E,"Asynchronous version of `Csound::read_score`",16,[[["self"],["str"]],[["str"],[R[4],["str"]]]]],[11,"get_score_time",E,"Returns The current score time in seconds since the…",16,[[["self"]],["f64"]]],[11,"is_score_pending",E,"Sets whether Csound score events are performed or not.…",16,[[["self"]],["i32"]]],[11,"set_score_pending",E,"Sets whether Csound score events are performed or not…",16,[[["self"],["i32"]]]],[11,"get_score_offset_seconds",E,"Gets the current score's time. # Returns The score time…",16,[[["self"]],["f64"]]],[11,"set_score_offset_seconds",E,"Csound score events prior to the specified time are not…",16,[[["self"],["f64"]]]],[11,"rewind_score",E,"Rewinds a compiled Csound score to the time specified with…",16,[[["self"]]]],[11,"get_message_level",E,"Returns The Csound message level (from 0 to 231).",16,[[["self"]],["u8"]]],[11,"set_message_level",E,"Sets the Csound message level (from 0 to 231).",16,[[["self"],["u8"]]]],[11,"create_message_buffer",E,"Creates a buffer for storing messages printed by Csound.…",16,[[["self"],["i32"]]]],[11,"destroy_message_buffer",E,"Releases all memory used by the message buffer. If this…",16,[[["self"]]]],[11,"get_first_message",E,"Returns The first message from the buffer.",16,[[["self"]],[[R[7]],[R[6],[R[7]]]]]],[11,"get_first_message_attr",E,"Returns The attribute parameter (`MessageType`) of the…",16,[[["self"]],[R[58]]]],[11,"pop_first_message",E,"Removes the first message from the buffer.",16,[[["self"]]]],[11,"get_message_count",E,"Returns The number of pending messages in the buffer.",16,[[["self"]],["u32"]]],[11,"list_channels",E,"Requests a list of all control channels. # Returns A…",16,[[["self"]],[["vec",[R[49]]],[R[6],["vec"]]]]],[11,"get_channel_ptr",E,"Return a `ControlChannelPtr` which represent a csound's…",16,[[["self"],["str"],[R[30]]],[[R[4],[R[16],R[5]]],[R[16]],[R[5]]]]],[11,"set_channel_hints",E,"Set parameters hints for a control channel. These hints…",16,[[["self"],[R[17]],["str"]],[[R[5]],[R[4],[R[5]]]]]],[11,"get_channel_hints",E,"Returns special parameters (or None if there are not any)…",16,[[["self"],["str"]],[[R[5]],[R[4],[R[17],R[5]]],[R[17]]]]],[11,"get_control_channel",E,"Retrieves the value of a control channel. # Arguments *…",16,[[["self"],["str"]],[["f64"],[R[4],["f64","str"]],["str"]]]],[11,"set_control_channel",E,"Sets the value of a control channel. # Arguments * `name`…",16,[[["self"],["f64"],["str"]]]],[11,"read_audio_channel",E,"Copies samples from an audio channel. # Arguments * `name`…",16,[[["self"],["str"]]]],[11,"write_audio_channel",E,"Writes data into an audio channel buffer. audio channel…",16,[[["self"],["str"]]]],[11,"get_string_channel",E,"Returns the content of the string channel identified by name",16,[[["self"],["str"]],[R[7]]]],[11,"set_string_channel",E,"Sets the string channel identified by name with content",16,[[["self"],["str"]]]],[11,"get_channel_data_size",E,"returns the size of data stored in the channel identified…",16,[[["self"],["str"]],["usize"]]],[11,"get_pvs_channel",E,"Receives a PVSDAT fout from the pvsout opcode. This method…",16,[[["self"],[R[18]],["str"]],[[R[5]],[R[4],[R[5]]]]]],[11,"set_pvs_channel",E,E,16,[[["self"],["str"],[R[18]]]]],[11,"send_score_event",E,"Send a new score event. # Arguments * `event_type` is the…",16,[[["self"],["char"]],[R[5]]]],[11,"send_score_event_absolute",E,"Like `Csound::send_score_event`. This function inserts a…",16,[[["self"],["char"],["f64"]],[R[5]]]],[11,"send_score_event_async",E,"Asynchronous version of `Csound::send_score_event`",16,[[["self"],["char"]],[R[5]]]],[11,"send_score_event_absolute_async",E,"Asynchronous version of `Csound::send_score_event_absolute`",16,[[["self"],["char"],["f64"]],[R[5]]]],[11,"send_input_message",E,"Input a string (as if from a console), used for line…",16,[[["self"],["str"]],[[R[8]],[R[4],[R[8]]]]]],[11,"send_input_message_async",E,"Asynchronous version of `Csound::send_input_message`",16,[[["self"],["str"]],[[R[8]],[R[4],[R[8]]]]]],[11,"kill_instrument",E,"Kills off one or more running instances of an instrument.…",16,[[["self"],["u32"],[R[6],["str"]],["f64"],["str"],["bool"]],[R[5]]]],[11,"key_press",E,"Set the ASCII code of the most recent key pressed. #…",16,[[["self"],["char"]]]],[11,"table_length",E,"Returns the length of a function table (not including the…",16,[[["self"],["u32"]],[[R[4],["usize","str"]],["usize"],["str"]]]],[11,"table_get",E,"Returns the value of a slot in a function table. If the…",16,[[["self"],["u32"]],[["f64"],[R[4],["f64","str"]],["str"]]]],[11,"table_set",E,"Sets the value of a slot in a function table. # Arguments…",16,[[["self"],["u32"],["f64"]],[["str"],[R[4],["str"]]]]],[11,"table_copy_out",E,"Copies the content of a function table into a slice. #…",16,[[["self"],["u32"]],[["str"],[R[4],["str"]]]]],[11,"table_copy_out_async",E,"Asynchronous version of `Csound:: table_copy_out`",16,[[["self"],["u32"]],[["str"],[R[4],["str"]]]]],[11,"table_copy_in",E,"Copy the contents of an array into a given function table.…",16,[[["self"],["u32"]],[["str"],[R[4],["str"]]]]],[11,"table_copy_in_async",E,"Asynchronous version of `Csound:: table_copy_in`",16,[[["self"],["u32"]],[["str"],[R[4],["str"]]]]],[11,"get_table",E,"Returns a `Csound::Table`. which could be used to…",16,[[["self"],["u32"]],[[R[6],["table"]],["table"]]]],[11,"get_table_args",E,R[19],16,[[["self"],["u32"]],[[R[6],["vec"]],["vec",["f64"]]]]],[11,"get_table_args_slice",E,R[19],16,[[["self"],["u32"]],[R[6]]]],[11,"is_named_gen",E,"Checks if a given gen number is a named GEN # Arguments *…",16,[[["self"],["u32"]],["usize"]]],[11,"get_gen_name",E,"Returns the GEN name if it exist ans is named, else,…",16,[[["self"],["u32"]],[[R[7]],[R[6],[R[7]]]]]],[11,"get_opcode_list_entry",E,"Gets an alphabetically sorted list of all opcodes. Should…",16,[[["self"]],[[R[6],["vec"]],["vec",[R[51]]]]]],[11,"set_language",E,"TODO genName and appendOpcode functions **** # Argument *…",16,[[[R[52]]]]],[11,"get_random_seed_from_time",E,"Generates a random seed from time # Returns A 32-bit…",16,[[],["u32"]]],[11,"get_rand31",E,"Simple linear congruential random number generator: seed =…",16,[[["u32"]],[[R[4],["u32","str"]],["u32"],["str"]]]],[11,"init_timer",E,"Returns an initialised timer structure.",16,[[],[R[20]]]],[11,"get_real_time",E,"Calculates a time offset # Arguments * `timer` time struct…",16,[[[R[20]]],["f64"]]],[11,"get_cpu_time",E,"Return the elapsed CPU time (in seconds) since the…",16,[[[R[20]]],["f64"]]],[11,"create_circular_buffer",E,"Creates a circular buffer. # Arguments * `len` The buffer…",16,[[["self"],["u32"]],[["circularbuffer"],["copy"]]]],[11,"sleep",E,E,16,[[["self"],["usize"]]]],[11,"audio_device_list_callback",E,"Sets a function that is called to obtain a list of audio…",16,[[["self"],["f"]]]],[11,"play_open_audio_callback",E,R[21],16,[[["self"],["f"]]]],[11,"rec_open_audio_callback",E,R[21],16,[[["self"],["f"]]]],[11,"rt_audio_play_callback",E,R[22],16,[[["self"],["f"]]]],[11,"rt_audio_rec_callback",E,R[22],16,[[["self"],["f"]]]],[11,"rt_close_callback",E,"Indicates to the user when csound has closed the rtaudio…",16,[[["self"],["f"]]]],[11,"sense_event_callback",E,"Sets callback to be called once in every control period.…",16,[[["self"],["f"]]]],[11,"message_string_callback",E,"Sets a callback which will be called by csound to print an…",16,[[["self"],["f"]]]],[11,"input_channel_callback",E,R[23],16,[[["self"],["f"]]]],[11,"output_channel_callback",E,R[23],16,[[["self"],["f"]]]],[11,"file_open_callback",E,"Sets an external callback for receiving notices whenever…",16,[[["self"],["f"]]]],[11,"midi_in_open_callback",E,R[21],16,[[["self"],["f"]]]],[11,"midi_out_open_callback",E,R[21],16,[[["self"],["f"]]]],[11,"midi_read_callback",E,"Sets a function to be called by Csound for reading from…",16,[[["self"],["f"]]]],[11,"midi_write_callback",E,"Sets a function to be called by Csound for Writing to real…",16,[[["self"],["f"]]]],[11,"midi_in_close_callback",E,R[24],16,[[["self"],["f"]]]],[11,"midi_out_close_callback",E,R[24],16,[[["self"],["f"]]]],[11,"yield_callback",E,"Called by external software to set a function for checking…",16,[[["self"],["f"]]]],[11,"read",E,"Read from circular buffer. # Arguments * `out` A mutable…",17,[[["self"],["u32"]],[[R[4],["usize","str"]],["usize"],["str"]]]],[11,"peek",E,"Read from circular buffer without removing them from the…",17,[[["self"],["u32"]],[[R[4],["usize","str"]],["usize"],["str"]]]],[11,"write",E,"Write to the circular buffer. # Arguments * `input` A…",17,[[["self"],["u32"]],[[R[4],["usize","str"]],["usize"],["str"]]]],[11,"flush",E,"Empty circular buffer of any remaining data. This function…",17,[[["self"]]]],[11,R[25],E,"Returns The table length",18,[[["self"]],["usize"]]],[11,R[27],E,"Returns A slice representation with the table's internal…",18,[[["self"]]]],[11,R[28],E,"Returns A mutable slice representation with the table's…",18,[[["self"]]]],[11,R[26],E,"method used to copy data from the table internal buffer…",18,[[["self"]],["usize"]]],[11,R[29],E,"method used to copy data into the table internal buffer…",18,[[["self"]],["usize"]]],[11,R[25],E,"Returns The buffer length",19,[[["self"]],["usize"]]],[11,R[26],E,"This method is used to copy data from the csound's buffer…",19,[[["self"]],["usize"]]],[11,R[27],E,"Returns A slice to the buffer internal data",19,[[["self"]]]],[11,R[28],E,"Returns This buffer pointer as a mutable slice.",19,[[["self"]]]],[11,R[29],E,"method used to copy data into this buffer # Arguments *…",19,[[["self"]],["usize"]]],[11,R[25],E,"Returns The channel length",20,[[["self"]],["usize"]]],[11,"read",E,E,20,[[["self"]],[["error"],["usize"],[R[4],["usize","error"]]]]],[11,"write",E,E,20,[[["self"]],[["error"],["usize"],[R[4],["usize","error"]]]]],[11,"to_i32",E,E,14,[[["self"]],["i32"]]],[18,"CSOUND_UNKNOWN_CHANNEL",E,"Unknown channel - use it to request the channel type",21,N],[18,"CSOUND_CONTROL_CHANNEL",E,"Define a csound control channel",21,N],[18,"CSOUND_AUDIO_CHANNEL",E,"Define a audio channel (chanel content is and array with…",21,N],[18,"CSOUND_STRING_CHANNEL",E,"String channel",21,N],[18,"CSOUND_PVS_CHANNEL",E,"Pvs channel",21,N],[18,"CSOUND_VAR_CHANNEL",E,"Generic channel",21,N],[18,"CSOUND_CHANNEL_TYPE_MASK",E,E,21,N],[18,"CSOUND_INPUT_CHANNEL",E,E,21,N],[18,"CSOUND_OUTPUT_CHANNEL",E,E,21,N],[11,"empty",E,"Returns an empty set of flags",21,[[],[R[30]]]],[11,"all",E,"Returns the set containing all flags.",21,[[],[R[30]]]],[11,"bits",E,"Returns the raw value of the flags currently stored.",21,[[["self"]],["u32"]]],[11,"from_bits",E,"Convert from underlying bit representation, unless that…",21,[[["u32"]],[[R[30]],[R[6],[R[30]]]]]],[11,"from_bits_truncate",E,"Convert from underlying bit representation, dropping any…",21,[[["u32"]],[R[30]]]],[11,"from_bits_unchecked",E,"Convert from underlying bit representation, preserving all…",21,[[["u32"]],[R[30]]]],[11,"is_empty",E,"Returns `true` if no flags are currently stored.",21,[[["self"]],["bool"]]],[11,"is_all",E,"Returns `true` if all flags are currently set.",21,[[["self"]],["bool"]]],[11,"intersects",E,"Returns `true` if there are flags common to both `self`…",21,[[["self"],[R[30]]],["bool"]]],[11,"contains",E,"Returns `true` all of the flags in `other` are contained…",21,[[["self"],[R[30]]],["bool"]]],[11,"insert",E,"Inserts the specified flags in-place.",21,[[["self"],[R[30]]]]],[11,"remove",E,"Removes the specified flags in-place.",21,[[["self"],[R[30]]]]],[11,"toggle",E,"Toggles the specified flags in-place.",21,[[["self"],[R[30]]]]],[11,"set",E,"Inserts or removes the specified flags depending on the…",21,[[["self"],[R[30]],["bool"]]]],[8,R[84],E,E,N,N],[10,R[40],E,E,22,[[["self"],["str"],[T]],[[R[5]],[R[4],[R[31],R[5]]],[R[31],[R[12]]]]]],[10,R[42],E,E,22,[[["self"],["str"],[T]],[[R[31],[R[13]]],[R[4],[R[31],R[5]]],[R[5]]]]],[8,R[85],E,"Tait with the write function which is implemented by…",N,N],[10,"write",E,E,23,[[["self"],[T]]]],[8,R[86],E,"Trait with the read function which is implemented by like…",N,N],[10,"read",E,E,24,[[["self"]],[T]]],[11,R[32],E,E,0,[[["self"]],[T]]],[11,R[33],E,E,0,[[["self"],[T]]]],[11,"from",E,E,0,[[[T]],[T]]],[11,"into",E,E,0,[[],[U]]],[11,R[34],E,E,0,[[[U]],[R[4]]]],[11,R[35],E,E,0,[[],[R[4]]]],[11,R[38],E,E,0,[[["self"]],[T]]],[11,R[36],E,E,0,[[["self"]],[T]]],[11,R[37],E,E,0,[[["self"]],[R[39]]]],[11,R[32],E,E,1,[[["self"]],[T]]],[11,R[33],E,E,1,[[["self"],[T]]]],[11,"from",E,E,1,[[[T]],[T]]],[11,"into",E,E,1,[[],[U]]],[11,R[34],E,E,1,[[[U]],[R[4]]]],[11,R[35],E,E,1,[[],[R[4]]]],[11,R[38],E,E,1,[[["self"]],[T]]],[11,R[36],E,E,1,[[["self"]],[T]]],[11,R[37],E,E,1,[[["self"]],[R[39]]]],[11,R[32],E,E,2,[[["self"]],[T]]],[11,R[33],E,E,2,[[["self"],[T]]]],[11,"from",E,E,2,[[[T]],[T]]],[11,"into",E,E,2,[[],[U]]],[11,R[34],E,E,2,[[[U]],[R[4]]]],[11,R[35],E,E,2,[[],[R[4]]]],[11,R[38],E,E,2,[[["self"]],[T]]],[11,R[36],E,E,2,[[["self"]],[T]]],[11,R[37],E,E,2,[[["self"]],[R[39]]]],[11,"from",E,E,25,[[[T]],[T]]],[11,"into",E,E,25,[[],[U]]],[11,R[34],E,E,25,[[[U]],[R[4]]]],[11,R[35],E,E,25,[[],[R[4]]]],[11,R[38],E,E,25,[[["self"]],[T]]],[11,R[36],E,E,25,[[["self"]],[T]]],[11,R[37],E,E,25,[[["self"]],[R[39]]]],[11,R[32],E,E,3,[[["self"]],[T]]],[11,R[33],E,E,3,[[["self"],[T]]]],[11,"from",E,E,3,[[[T]],[T]]],[11,"into",E,E,3,[[],[U]]],[11,R[34],E,E,3,[[[U]],[R[4]]]],[11,R[35],E,E,3,[[],[R[4]]]],[11,R[38],E,E,3,[[["self"]],[T]]],[11,R[36],E,E,3,[[["self"]],[T]]],[11,R[37],E,E,3,[[["self"]],[R[39]]]],[11,"from",E,E,19,[[[T]],[T]]],[11,"into",E,E,19,[[],[U]]],[11,R[34],E,E,19,[[[U]],[R[4]]]],[11,R[35],E,E,19,[[],[R[4]]]],[11,R[38],E,E,19,[[["self"]],[T]]],[11,R[36],E,E,19,[[["self"]],[T]]],[11,R[37],E,E,19,[[["self"]],[R[39]]]],[11,"from",E,E,17,[[[T]],[T]]],[11,"into",E,E,17,[[],[U]]],[11,R[34],E,E,17,[[[U]],[R[4]]]],[11,R[35],E,E,17,[[],[R[4]]]],[11,R[38],E,E,17,[[["self"]],[T]]],[11,R[36],E,E,17,[[["self"]],[T]]],[11,R[37],E,E,17,[[["self"]],[R[39]]]],[11,"from",E,E,20,[[[T]],[T]]],[11,"into",E,E,20,[[],[U]]],[11,R[34],E,E,20,[[[U]],[R[4]]]],[11,R[35],E,E,20,[[],[R[4]]]],[11,R[38],E,E,20,[[["self"]],[T]]],[11,R[36],E,E,20,[[["self"]],[T]]],[11,R[37],E,E,20,[[["self"]],[R[39]]]],[11,"from",E,E,16,[[[T]],[T]]],[11,"into",E,E,16,[[],[U]]],[11,R[34],E,E,16,[[[U]],[R[4]]]],[11,R[35],E,E,16,[[],[R[4]]]],[11,R[38],E,E,16,[[["self"]],[T]]],[11,R[36],E,E,16,[[["self"]],[T]]],[11,R[37],E,E,16,[[["self"]],[R[39]]]],[11,"from",E,E,4,[[[T]],[T]]],[11,"into",E,E,4,[[],[U]]],[11,R[34],E,E,4,[[[U]],[R[4]]]],[11,R[35],E,E,4,[[],[R[4]]]],[11,R[38],E,E,4,[[["self"]],[T]]],[11,R[36],E,E,4,[[["self"]],[T]]],[11,R[37],E,E,4,[[["self"]],[R[39]]]],[11,"from",E,E,18,[[[T]],[T]]],[11,"into",E,E,18,[[],[U]]],[11,R[34],E,E,18,[[[U]],[R[4]]]],[11,R[35],E,E,18,[[],[R[4]]]],[11,R[38],E,E,18,[[["self"]],[T]]],[11,R[36],E,E,18,[[["self"]],[T]]],[11,R[37],E,E,18,[[["self"]],[R[39]]]],[11,R[32],E,E,21,[[["self"]],[T]]],[11,R[33],E,E,21,[[["self"],[T]]]],[11,"from",E,E,21,[[[T]],[T]]],[11,"into",E,E,21,[[],[U]]],[11,R[34],E,E,21,[[[U]],[R[4]]]],[11,R[35],E,E,21,[[],[R[4]]]],[11,R[38],E,E,21,[[["self"]],[T]]],[11,R[36],E,E,21,[[["self"]],[T]]],[11,R[37],E,E,21,[[["self"]],[R[39]]]],[11,R[32],E,E,5,[[["self"]],[T]]],[11,R[33],E,E,5,[[["self"],[T]]]],[11,"from",E,E,5,[[[T]],[T]]],[11,"into",E,E,5,[[],[U]]],[11,R[34],E,E,5,[[[U]],[R[4]]]],[11,R[35],E,E,5,[[],[R[4]]]],[11,R[38],E,E,5,[[["self"]],[T]]],[11,R[36],E,E,5,[[["self"]],[T]]],[11,R[37],E,E,5,[[["self"]],[R[39]]]],[11,R[32],E,E,6,[[["self"]],[T]]],[11,R[33],E,E,6,[[["self"],[T]]]],[11,"from",E,E,6,[[[T]],[T]]],[11,"into",E,E,6,[[],[U]]],[11,R[34],E,E,6,[[[U]],[R[4]]]],[11,R[35],E,E,6,[[],[R[4]]]],[11,R[38],E,E,6,[[["self"]],[T]]],[11,R[36],E,E,6,[[["self"]],[T]]],[11,R[37],E,E,6,[[["self"]],[R[39]]]],[11,R[32],E,E,7,[[["self"]],[T]]],[11,R[33],E,E,7,[[["self"],[T]]]],[11,"from",E,E,7,[[[T]],[T]]],[11,"into",E,E,7,[[],[U]]],[11,R[34],E,E,7,[[[U]],[R[4]]]],[11,R[35],E,E,7,[[],[R[4]]]],[11,R[38],E,E,7,[[["self"]],[T]]],[11,R[36],E,E,7,[[["self"]],[T]]],[11,R[37],E,E,7,[[["self"]],[R[39]]]],[11,"from",E,E,8,[[[T]],[T]]],[11,"into",E,E,8,[[],[U]]],[11,R[34],E,E,8,[[[U]],[R[4]]]],[11,R[35],E,E,8,[[],[R[4]]]],[11,R[38],E,E,8,[[["self"]],[T]]],[11,R[36],E,E,8,[[["self"]],[T]]],[11,R[37],E,E,8,[[["self"]],[R[39]]]],[11,R[32],E,E,9,[[["self"]],[T]]],[11,R[33],E,E,9,[[["self"],[T]]]],[11,"from",E,E,9,[[[T]],[T]]],[11,"into",E,E,9,[[],[U]]],[11,R[34],E,E,9,[[[U]],[R[4]]]],[11,R[35],E,E,9,[[],[R[4]]]],[11,R[38],E,E,9,[[["self"]],[T]]],[11,R[36],E,E,9,[[["self"]],[T]]],[11,R[37],E,E,9,[[["self"]],[R[39]]]],[11,"from",E,E,10,[[[T]],[T]]],[11,"into",E,E,10,[[],[U]]],[11,R[34],E,E,10,[[[U]],[R[4]]]],[11,R[35],E,E,10,[[],[R[4]]]],[11,R[38],E,E,10,[[["self"]],[T]]],[11,R[36],E,E,10,[[["self"]],[T]]],[11,R[37],E,E,10,[[["self"]],[R[39]]]],[11,R[32],E,E,11,[[["self"]],[T]]],[11,R[33],E,E,11,[[["self"],[T]]]],[11,"from",E,E,11,[[[T]],[T]]],[11,"into",E,E,11,[[],[U]]],[11,R[34],E,E,11,[[[U]],[R[4]]]],[11,R[35],E,E,11,[[],[R[4]]]],[11,R[38],E,E,11,[[["self"]],[T]]],[11,R[36],E,E,11,[[["self"]],[T]]],[11,R[37],E,E,11,[[["self"]],[R[39]]]],[11,R[32],E,E,12,[[["self"]],[T]]],[11,R[33],E,E,12,[[["self"],[T]]]],[11,"from",E,E,12,[[[T]],[T]]],[11,"into",E,E,12,[[],[U]]],[11,R[34],E,E,12,[[[U]],[R[4]]]],[11,R[35],E,E,12,[[],[R[4]]]],[11,R[38],E,E,12,[[["self"]],[T]]],[11,R[36],E,E,12,[[["self"]],[T]]],[11,R[37],E,E,12,[[["self"]],[R[39]]]],[11,"from",E,E,13,[[[T]],[T]]],[11,"into",E,E,13,[[],[U]]],[11,R[34],E,E,13,[[[U]],[R[4]]]],[11,R[35],E,E,13,[[],[R[4]]]],[11,R[38],E,E,13,[[["self"]],[T]]],[11,R[36],E,E,13,[[["self"]],[T]]],[11,R[37],E,E,13,[[["self"]],[R[39]]]],[11,"from",E,E,14,[[[T]],[T]]],[11,"into",E,E,14,[[],[U]]],[11,R[34],E,E,14,[[[U]],[R[4]]]],[11,R[35],E,E,14,[[],[R[4]]]],[11,R[38],E,E,14,[[["self"]],[T]]],[11,R[36],E,E,14,[[["self"]],[T]]],[11,R[37],E,E,14,[[["self"]],[R[39]]]],[11,"from",E,E,15,[[[T]],[T]]],[11,"into",E,E,15,[[],[U]]],[11,R[34],E,E,15,[[[U]],[R[4]]]],[11,R[35],E,E,15,[[],[R[4]]]],[11,R[38],E,E,15,[[["self"]],[T]]],[11,R[36],E,E,15,[[["self"]],[T]]],[11,R[37],E,E,15,[[["self"]],[R[39]]]],[11,R[40],E,R[43],16,[[["self"],["str"],[R[41]]],[[R[5]],[R[31],[R[41],R[12]]],[R[4],[R[31],R[5]]]]]],[11,R[42],E,R[45],16,[[["self"],["str"],[R[41]]],[[R[5]],[R[31],[R[41],R[13]]],[R[4],[R[31],R[5]]]]]],[11,R[40],E,R[43],16,[[["self"],["str"],[R[44]]],[[R[5]],[R[4],[R[31],R[5]]],[R[31],[R[44],R[12]]]]]],[11,R[42],E,R[45],16,[[["self"],["str"],[R[44]]],[[R[31],[R[44],R[13]]],[R[5]],[R[4],[R[31],R[5]]]]]],[11,R[40],E,R[43],16,[[["self"],["str"],[R[46]]],[[R[4],[R[31],R[5]]],[R[31],[R[46],R[12]]],[R[5]]]]],[11,R[42],E,R[45],16,[[["self"],["str"],[R[46]]],[[R[5]],[R[31],[R[46],R[13]]],[R[4],[R[31],R[5]]]]]],[11,"write",E,"Writes data to csound's control channel",25,[[["self"],["f64"]]]],[11,"write",E,"Writes audio data to an audio channel",25,[[["self"]]]],[11,"write",E,"Writes bytes to a string channel's buffer",25,[[["self"]]]],[11,"read",E,"Reads data from a csound's control channel",25,[[["self"]],["f64"]]],[11,"read",E,R[47],25,[[["self"]]]],[11,"read",E,R[47],25,[[["self"]]]],[11,"drop",E,E,16,[[["self"]]]],[11,"drop",E,E,17,[[["self"]]]],[11,R[48],E,E,25,[[["self"]],["f64"]]],[11,R[48],E,E,25,[[["self"]],["f64"]]],[11,R[48],E,E,25,[[["self"]]]],[11,R[48],E,E,25,[[["self"]]]],[11,R[48],E,E,25,[[["self"]]]],[11,R[48],E,E,25,[[["self"]]]],[11,R[48],E,E,18,[[["self"]]]],[11,R[48],E,E,19,[[["self"]]]],[11,R[50],E,E,1,[[],[R[17]]]],[11,R[50],E,E,2,[[],[R[49]]]],[11,R[50],E,E,4,[[],[R[51]]]],[11,R[50],E,E,16,[[],["self"]]],[11,R[50],E,E,5,[[],[R[53]]]],[11,R[50],E,E,6,[[],[R[54]]]],[11,R[50],E,E,7,[[],[R[55]]]],[11,"clone",E,E,0,[[["self"]],["fileinfo"]]],[11,"clone",E,E,1,[[["self"]],[R[17]]]],[11,"clone",E,E,2,[[["self"]],[R[49]]]],[11,"clone",E,E,3,[[["self"]],[R[18]]]],[11,"clone",E,E,9,[[["self"]],[R[59]]]],[11,"clone",E,E,21,[[["self"]],[R[30]]]],[11,"clone",E,E,12,[[["self"]],[R[52]]]],[11,"clone",E,E,11,[[["self"]],[R[60]]]],[11,"clone",E,E,5,[[["self"]],[R[53]]]],[11,"clone",E,E,6,[[["self"]],[R[54]]]],[11,"clone",E,E,7,[[["self"]],[R[55]]]],[11,R[57],E,E,14,[[["self"],[R[5]]],[[R[6],[R[56]]],[R[56]]]]],[11,"lt",E,E,14,[[["self"],[R[5]]],["bool"]]],[11,"le",E,E,14,[[["self"],[R[5]]],["bool"]]],[11,"gt",E,E,14,[[["self"],[R[5]]],["bool"]]],[11,"ge",E,E,14,[[["self"],[R[5]]],["bool"]]],[11,R[57],E,E,21,[[["self"],[R[30]]],[[R[6],[R[56]]],[R[56]]]]],[11,"lt",E,E,21,[[["self"],[R[30]]],["bool"]]],[11,"le",E,E,21,[[["self"],[R[30]]],["bool"]]],[11,"gt",E,E,21,[[["self"],[R[30]]],["bool"]]],[11,"ge",E,E,21,[[["self"],[R[30]]],["bool"]]],[11,"extend",E,E,21,[[["self"],[R[64]]]]],[11,"eq",E,E,8,[[["self"],[R[41]]],["bool"]]],[11,"eq",E,E,10,[[["self"],[R[44]]],["bool"]]],[11,"eq",E,E,15,[[["self"],[R[46]]],["bool"]]],[11,"eq",E,E,13,[[["self"],[R[58]]],["bool"]]],[11,"eq",E,E,14,[[["self"],[R[5]]],["bool"]]],[11,"ne",E,E,14,[[["self"],[R[5]]],["bool"]]],[11,"eq",E,E,9,[[["self"],[R[59]]],["bool"]]],[11,"ne",E,E,9,[[["self"],[R[59]]],["bool"]]],[11,"eq",E,E,21,[[["self"],[R[30]]],["bool"]]],[11,"ne",E,E,21,[[["self"],[R[30]]],["bool"]]],[11,"eq",E,E,12,[[["self"],[R[52]]],["bool"]]],[11,"eq",E,E,11,[[["self"],[R[60]]],["bool"]]],[11,"from",E,E,13,[[["u32"]],["self"]]],[11,"from",E,E,14,[[["i32"]],["self"]]],[11,"from",E,E,11,[[["u8"]],["self"]]],[11,"cmp",E,E,21,[[["self"],[R[30]]],[R[56]]]],[11,R[61],E,E,25,[[["self"]],["f64"]]],[11,R[61],E,E,25,[[["self"]]]],[11,R[61],E,E,25,[[["self"]]]],[11,R[61],E,E,18,[[["self"]]]],[11,R[61],E,E,19,[[["self"]]]],[11,"deref",E,E,25,[[["self"]]]],[11,"deref",E,E,25,[[["self"]]]],[11,"deref",E,E,25,[[["self"]]]],[11,"deref",E,E,25,[[["self"]]]],[11,"deref",E,E,25,[[["self"]]]],[11,"deref",E,E,25,[[["self"]]]],[11,"deref",E,E,18,[[["self"]]]],[11,"deref",E,E,19,[[["self"]]]],[11,R[62],E,E,25,[[["self"]]]],[11,R[62],E,E,25,[[["self"]]]],[11,R[62],E,E,25,[[["self"]]]],[11,R[62],E,E,18,[[["self"]]]],[11,R[62],E,E,19,[[["self"]]]],[11,"hash",E,E,21,[[["self"],["__h"]]]],[11,"fmt",E,E,0,[[["self"],[R[63]]],[R[4]]]],[11,"fmt",E,E,1,[[["self"],[R[63]]],[R[4]]]],[11,"fmt",E,E,2,[[["self"],[R[63]]],[R[4]]]],[11,"fmt",E,E,3,[[["self"],[R[63]]],[R[4]]]],[11,"fmt",E,E,25,[[["self"],[R[63]]],[R[4]]]],[11,"fmt",E,E,4,[[["self"],[R[63]]],[R[4]]]],[11,"fmt",E,E,16,[[["self"],[R[63]]],[R[4]]]],[11,"fmt",E,E,18,[[["self"],[R[63]]],[R[4]]]],[11,"fmt",E,E,20,[[["self"],[R[63]]],[R[4]]]],[11,"fmt",E,E,8,[[["self"],[R[63]]],[R[4]]]],[11,"fmt",E,E,10,[[["self"],[R[63]]],[R[4]]]],[11,"fmt",E,E,15,[[["self"],[R[63]]],[R[4]]]],[11,"fmt",E,E,13,[[["self"],[R[63]]],[R[4]]]],[11,"fmt",E,E,14,[[["self"],[R[63]]],[R[4]]]],[11,"fmt",E,E,9,[[["self"],[R[63]]],[R[4]]]],[11,"fmt",E,E,21,[[["self"],[R[63]]],[R[4]]]],[11,"fmt",E,E,12,[[["self"],[R[63]]],[R[4]]]],[11,"fmt",E,E,11,[[["self"],[R[63]]],[R[4]]]],[11,"fmt",E,E,6,[[["self"],[R[63]]],[R[4]]]],[11,"fmt",E,E,5,[[["self"],[R[63]]],[R[4]]]],[11,"fmt",E,E,7,[[["self"],[R[63]]],[R[4]]]],[11,"sub",E,"Returns the set difference of the two sets of flags.",21,[[[R[30]]],[R[30]]]],[11,"sub_assign",E,"Disables all flags enabled in the set.",21,[[["self"],[R[30]]]]],[11,"not",E,"Returns the complement of this set of flags.",21,[[],[R[30]]]],[11,"bitand",E,"Returns the intersection between the two sets of flags.",21,[[[R[30]]],[R[30]]]],[11,"bitor",E,"Returns the union of the two sets of flags.",21,[[[R[30]]],[R[30]]]],[11,"bitxor",E,"Returns the left flags, but with all the right flags…",21,[[[R[30]]],[R[30]]]],[11,"bitand_assign",E,"Disables all flags disabled in the set.",21,[[["self"],[R[30]]]]],[11,"bitor_assign",E,"Adds the set of flags.",21,[[["self"],[R[30]]]]],[11,"bitxor_assign",E,"Toggles the set of flags.",21,[[["self"],[R[30]]]]],[11,"from_iter",E,E,21,[[[R[64]]],[R[30]]]],[11,"fmt",E,E,21,[[["self"],[R[63]]],[R[4]]]],[11,"fmt",E,E,21,[[["self"],[R[63]]],[R[4]]]],[11,"fmt",E,E,21,[[["self"],[R[63]]],[R[4]]]],[11,"fmt",E,E,21,[[["self"],[R[63]]],[R[4]]]]],"p":[[3,R[65]],[3,R[66]],[3,R[67]],[3,R[68]],[3,R[69]],[3,R[70]],[3,R[71]],[3,R[72]],[4,R[73]],[4,R[74]],[4,R[75]],[4,R[76]],[4,R[77]],[4,R[78]],[4,"Status"],[4,R[79]],[3,"Csound"],[3,R[80]],[3,"Table"],[3,R[81]],[3,R[82]],[3,R[83]],[8,R[84]],[8,R[85]],[8,R[86]],[3,R[87]]]};
initSearch(searchIndex);addSearchOptions(searchIndex);